schema {
  query: Query
}

type Query {
  fetchCards: [ElderCard!]
}

type ElderCard {
  # A unique id for this card. It is made up via a SHA1 of the {card name}-{set name}
  id: ID!

  # The card name. Put the name in double quotes for an exact match, otherwise partial matching will be applied.
  name: String!

  # The rarity of the card (ex. Common, Epic, Rare, Legendary)
  rarity: String!

  # The type of the card (ex. Action, Creature, Item, Support)
  type: String!

  # The subtypes of the card (ex. Argonian, Dragon, Imperial)
  subtypes: String!

  # How much it costs to cast the card
  cost: Int!

  # How much damage the card can do
  power: Int!

  # The total health of the card
  health: Int!

  # The set that the card belongs to
  set: ElderCardSet!

  # The number of soul gems it costs to soul summon
  soulSummon: Int!

  # The number of soul gems it costs to soul trap
  soulTrap: Int!

  # Rules of the card
  text: String!

  # The attributes of the card (ex. Agility, Endurance, Intelligence)
  attributes: [String!]

  # The keywords of the card (ex. Assemble, Breakthrough, Charge)
  keywords: [String!]

  # Is the card unique? Unqiue cards can only be included once per deck.
  unique: Boolean!

  imageUrl: String!
}

type ElderCardSet {
  # The id of the set the card belongs to
  id: ID!

  # The name of the set the card belongs to
  name: String!

  meta: String!
}